class Solution {
    
    private void backtrack (int remain, int k, LinkedList<Integer> comb, int next_start, List<List<Integer>> res) {
        
        if (remain == 0 && comb.size() == k) {
            res.add(new ArrayList<Integer>(comb));
            return;
        } else if (remain < 0 || comb.size()==k) {
            return;
        }
        
        for (int i = next_start; i < 9; ++i) {
            comb.add(i + 1);
            this.backtrack(remain - i - 1, k, comb, i + 1, res);
            comb.removeLast();
        }
    }
        
        
    public List<List<Integer>> combinationSum3(int k, int n) {
        
        List<List<Integer>> res = new ArrayList<>();
        LinkedList<Integer> comb = new LinkedList<>();

        this.backtrack(n, k, comb, 0, res);
        return res;
          
    }
}
