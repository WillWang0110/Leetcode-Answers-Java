class MyHeapNode {
    
    int row;
    int column;
    int value;
    
    public MyHeapNode (int value, int row, int column) {
        this.value = value;
        this.row = row;
        this.column = column;
    }
    
    public int getValue() {
        return this.value;
    }
    
    public int getRow() {
        return this.row;
    }
    
    public int getColumn() {
        return this.column;
    }
    
}

class MyHeapComparator implements Comparator<MyHeapNode> {
    public int compare(MyHeapNode x, MyHeapNode y) {
        return x.value - y.value;
    }
}

class Solution{
     public int kthSmallest(int[][] matrix, int k) {
        
        int N = matrix.length;
         
        PriorityQueue<MyHeapNode> minHeap = new PriorityQueue<>(Math.min(N, k), new MyHeapComparator());
         
         for (int r = 0; r < Math.min(N,k); r++) {
             minHeap.offer(new MyHeapNode(matrix[r][0],r, 0));
         }
         
         MyHeapNode element = minHeap.peek();
         
         while (k-- > 0) {
             element = minHeap.poll();
             int r = element.getRow(), c = element.getColumn();
             
             if (c < N - 1) {
                 minHeap.add(new MyHeapNode(matrix[r][c+1], r, c+1));
             }
         }
         
         return element.getValue();
    }   
}
