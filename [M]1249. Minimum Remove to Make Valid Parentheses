1. 
//Use stack to store removable character's index
//Use StringBuilder to build a String
//Use a SET to keep all removable character's index so it takes O(n) time to 

class Solution {
    public String minRemoveToMakeValid(String s) {
        Set<Integer> indexToRemove = new HashSet<>();
        Deque<Integer> stack = new ArrayDeque<>();
        
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') stack.push(i);
            if (s.charAt(i) == ')') {
                if (stack.isEmpty()) indexToRemove.add(i);
                else stack.pop();
            }
        }
        
        while (!stack.isEmpty()) indexToRemove.add(stack.pop());
        StringBuilder sb = new StringBuilder();
        
        for (int i = 0; i < s.length(); i++) {
            if (!indexToRemove.contains(i)) sb.append(s.charAt(i));
        }
        
        return sb.toString();
    }
}

2.
//Two pass string builder
//CharSequence使用

class Solution {
    public String minRemoveToMakeValid(String s) {
        StringBuilder res = removeInvalidClosing(s, '(', ')');
        res = removeInvalidClosing(res.reverse(), ')', '(');
        
        return res.reverse().toString();
    }
    
    private StringBuilder removeInvalidClosing(CharSequence string, char open, char close) {
        StringBuilder sb = new StringBuilder();
        
        int balance = 0;
        for (int i = 0; i < string.length(); i++) {
            char c = string.charAt(i);
            if (c == open) balance ++;
            if (c == close) {
                if (balance == 0) continue;
                balance --;
            } 
            sb.append(c);
        }
        return sb;
    }
}
