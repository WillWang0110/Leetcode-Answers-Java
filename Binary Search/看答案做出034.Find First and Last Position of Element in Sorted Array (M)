//注意，为什么 while (left <= right)
//分了两次，分别找上下界

class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) return new int[]{-1, -1};
        
        int left = 0, right = nums.length - 1;
        int leftMost = -1, rightMost = right + 1;
        
        //find leftmost
        //函数lower_bound()在first和last中的前闭后开区间进行二分查找，返回大于或等于val的第一个元素位置。如果所有元素都小于val，则返回last的位置.
        
        while (left <= right) {
            int mid = (left + right) / 2;
            
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else {
                leftMost = mid;
                right = mid - 1;
            }
        }
        
        int leftR = 0, rightR = nums.length - 1;
        while (leftR <= rightR) {
            int mid = leftR + (rightR - leftR) / 2;
            
            if (nums[mid] < target) {
                leftR = mid + 1;
            } else if (nums[mid] > target) {
                rightR = mid - 1;
            } else {
                rightMost = mid;
                leftR = mid + 1;
            }
        }
        
        return leftMost == -1 || rightMost == nums.length ? new int[]{-1, -1} : new int[]{leftMost, rightMost}; 
    }
}
